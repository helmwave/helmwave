name: Dependabot

on:
  pull_request:
    branches: [ main ]
    types: [ opened ]

permissions:
  contents: write
  pull-requests: write


jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.pull_request.head.ref, 'dependabot/') }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - id: dependabot
        uses: dependabot/fetch-metadata@v2

      - name: generate changelog
        uses: miniscruff/changie-action@v2
        if: github.actor == 'dependabot[bot]'
        with:
          version: latest
          args: |
            new -k Dependencies -b "${{ github.event.pull_request.title }}" -m Issue=${{ github.event.number }} -m Author=dependabot 

      - name: push changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        if: github.actor == 'dependabot[bot]'
        with:
          commit_message: "chore: add changelog via changie #${{ github.event.number }}"
          commit_user_name: ${{ github.actor }}
          commit_user_email: "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      #
      #  dependabot-base:
      #    if: ${{ startsWith(github.event.pull_request.head.ref, 'dependabot/') }}
      #    runs-on: ubuntu-latest
      #    steps:
      - name: get new patch version
        uses: miniscruff/changie-action@v2
        id: version
        with:
          version: latest
          args: next patch

      - id: next
        run: echo "version=${TAG#v}" >> "$GITHUB_OUTPUT"
        env:
          TAG: ${{ steps.version.outputs.output }}

      - uses: wow-actions/use-app-token@v2
        id: token
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}



      - name: create release branch
        uses: actions/github-script@v7
        continue-on-error: true
        env:
          BRANCH: release/${{ steps.next.outputs.version }}
        with:
          github-token: ${{ steps.token.outputs.BOT_TOKEN }}
          script: |-2
            const main = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main',
            })
          
            const ref = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/heads/' + process.env.BRANCH,
                sha: main.data.object.sha,
            }

            await github.rest.git.createRef(ref)
          result-encoding: string



      - name: main to release branch
        run: gh pr edit ${{ github.event.number }} -B $BRANCH
        env:
          BRANCH: release/${{ steps.next.outputs.version }}
          GH_TOKEN: ${{ github.token }}

      - name: approve & merge
        run: |
          gh pr review ${{ github.event.number }} --approve -b "LGTM ðŸ¤ª" 
          gh pr merge  ${{ github.event.number }} --auto --merge
        env:
          GH_TOKEN: ${{ steps.token.outputs.BOT_TOKEN }} # merge via helmwave[bot]

